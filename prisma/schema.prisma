generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model create

// User
model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  role             String
  contactNo        String
  address          String
  profileImg       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  bookings         Booking[]
  Faqs             Faqs[]
  Blog             Blog[]
  FeedBack         FeedBack[]
  Category         Category[]
  Service          Service[]

  @@map("user")
}

// Category
model Category {
  id        String    @id @default(uuid())
  title     String
  image     String
  authorID  String
  user      User      @relation(fields: [authorID], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]

  @@map("category")
}

// Services
model Service {
  id               String            @id @default(uuid())
  title            String
  authorID         String
  price            Float
  publicationDate  DateTime          @default(now())
  description      String
  image            String
  location         String
  upcoming         String
  availability     String
  features         String
  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id])
  user             User              @relation(fields: [authorID], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  FeedBack         FeedBack[]
  Booking          Booking[]

  @@map("service")
}

// Review And Rating
model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  serviceId String
  // Define relationships to User and Services models
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_and_rating")
}

// bookings
model Booking {
  id        String            @id @default(uuid())
  userId    String
  serviceId String
  price     Int
  date      String
  sameId    String
  time      String
  status    BookingStatusEnum
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  // Define relationship to User model
  user      User              @relation(fields: [userId], references: [id])
  service   Service           @relation(fields: [serviceId], references: [id])

  @@map("booking")
}

// faqs
model Faqs {
  id        String   @id @default(uuid())
  authorID  String
  ques      String
  ans       String
  status    String   @default("inactive")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Define relationship to User model
  user      User     @relation(fields: [authorID], references: [id])

  @@map("faqs")
}

// blog
model Blog {
  id        String   @id @default(uuid())
  authorID  String
  title     String
  image     String
  desc      String
  status    String   @default("inactive")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Define relationship to User model
  user      User     @relation(fields: [authorID], references: [id])

  @@map("blog")
}

// Feedback
model FeedBack {
  id         String   @id @default(uuid())
  review     String
  experience Int
  userId     String
  serviceId  String
  // Define relationships to User and Services models
  user       User     @relation(fields: [userId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("feedback")
}

enum RoleEnum {
  user
  admin
  super_admin
}

enum BookingStatusEnum {
  pending
  approved
  rejected
  missing
  canceled
}
